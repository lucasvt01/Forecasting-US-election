require(lme4)
install.packages("lme4")
require(mvtnorm)
install.packages("mvtnorm")
require(magrittr)
require(plyr)
require(dplyr)
require(reshape2)
install.packages("reshape2")
require(reshape2)
require(magrittr)
require(plyr)
setwd("/home/lucas/Documentos/Cursos/Forecasting Ultimate Election_US/Data/")
#load dataset
fundamental.data<-read.csv("fundamental_data_election.csv",stringsAsFactors=F,header=T)
dim(fundamental.data); colnames(fundamental.data); head(fundamental.data)
#date to partition train and test data sets
test.election.date<-2020
train<-fundamental.data[fundamental.data$election_year<test.election.date,]
test<-fundamental.data[fundamental.data$election_year==test.election.date,]
fundamental.model<-lmer(republican_vote_share_adj~PVI+state_unemployment+nat_gdp+race_white+
(1|election_year)+(1|region),
data=train)
library(lme4)
fundamental.model<-lmer(republican_vote_share_adj~PVI+state_unemployment+nat_gdp+race_white+
(1|election_year)+(1|region),
data=train)
vote.share.var<-as.data.frame(VarCorr(fundamental.model))
vote.share.var
national.error.var<-matrix(vote.share.var$vcov[vote.share.var$grp=="election_year"])
regional.error.var<-matrix(vote.share.var$vcov[vote.share.var$grp=="region"])
state.error.var<-matrix(vote.share.var$vcov[vote.share.var$grp=="Residual"])
```
B<-1000 #number of times to simulate election
n.years<-length(unique(train$election_year))
n.states<-length(unique(train$state))
n.regions<-length(unique(train$region))
df<-n.years-1 #set df for student t simulations as number of elections minus 1
state.region.mapping<-unique(fundamental.data[,c("state","region")])
electoral.votes<-unique(fundamental.data[,c("state","electoral_votes")])
simulate election B times
#repeat each row of test dataset B times to create expanded data across all simulations
#note here each columns is therefore one simulation (rows are states + DC)
test.sim<-test[rep(1:nrow(test),times=B),]
dim(test.sim)
#create matrix of test set predictions; note flag for re.form=NA to set random effects to zero for fixed effects prediction
fund.pred<-predict(fundamental.model,newdata=test.sim,re.form=NA)
pred.rep.share<-matrix(fund.pred,ncol=B)
dim(pred.rep.share); pred.rep.share[1:5,1:5]
#simulate random errors at national level
national.error<-rep(rmvt(n=B,sigma=national.error.var,df=df),each=n.states)
national.error<-matrix(national.error,ncol=B)
dim(national.error); national.error[1:5,1:5]
#simulate random errors at regional level
#draw each region B times
region.error<-rmvt(n=n.regions*B,sigma=regional.error.var)
region.error<-matrix(region.error,ncol=B)
dim(region.error); region.error[,1:5]
#replicate regional simulations so that states in same region get same regional error
#this creates correlation among states within a region
head(state.region.mapping)
region.state.index<-as.numeric(factor(state.region.mapping$region))
region.error<-region.error[region.state.index,]
dim(region.error); data.frame(state.region.mapping,region.error)[1:5,1:5]
#simulate random errors at state level
#draw each state B times
state.error<-rmvt(n=n.states*B,sigma=state.error.var,df=df)
state.error<-matrix(state.error,ncol=B)
dim(state.error); state.error[1:5,1:5]
#calculate vote shares by simulation
#add three simulated errors to predicted republican vote shares
pred.rep.share<-pred.rep.share+national.error+region.error+state.error
```
fundamental.model<-lmer(republican_vote_share_adj~PVI+state_unemployment+nat_gdp+race_white+
(1|election_year)+(1|region),
data=train)
sumary(fundamental.data)
```
sumary(fundamental.data)
summary(fundamental.data)
vote.share.var<-as.data.frame(VarCorr(fundamental.model))
vote.share.var
national.error.var<-matrix(vote.share.var$vcov[vote.share.var$grp=="election_year"])
regional.error.var<-matrix(vote.share.var$vcov[vote.share.var$grp=="region"])
state.error.var<-matrix(vote.share.var$vcov[vote.share.var$grp=="Residual"])
B<-1000 #number of times to simulate election
n.years<-length(unique(train$election_year))
n.states<-length(unique(train$state))
n.regions<-length(unique(train$region))
df<-n.years-1 #set df for student t simulations as number of elections minus 1
state.region.mapping<-unique(fundamental.data[,c("state","region")])
electoral.votes<-unique(fundamental.data[,c("state","electoral_votes")])
test.sim<-test[rep(1:nrow(test),times=B),]
dim(test.sim)
#create matrix of test set predictions; note flag for re.form=NA to set random effects to zero for fixed effects prediction
fund.pred<-predict(fundamental.model,newdata=test.sim,re.form=NA)
pred.rep.share<-matrix(fund.pred,ncol=B)
dim(pred.rep.share); pred.rep.share[1:5,1:5]
#simulate random errors at national level
national.error<-rep(rmvt(n=B,sigma=national.error.var,df=df),each=n.states)
national.error<-matrix(national.error,ncol=B)
dim(national.error); national.error[1:5,1:5]
national.error<-rep(rmvt(n=B,sigma=national.error.var,df=df),each=n.states)
library(mvtnorm)
national.error<-rep(rmvt(n=B,sigma=national.error.var,df=df),each=n.states)
national.error<-matrix(national.error,ncol=B)
dim(national.error); national.error[1:5,1:5]
region.error<-rmvt(n=n.regions*B,sigma=regional.error.var)
region.error<-matrix(region.error,ncol=B)
dim(region.error); region.error[,1:5]
head(state.region.mapping)
region.state.index<-as.numeric(factor(state.region.mapping$region))
region.error<-region.error[region.state.index,]
dim(region.error); data.frame(state.region.mapping,region.error)[1:5,1:5]
state.error<-rmvt(n=n.states*B,sigma=state.error.var,df=df)
state.error<-matrix(state.error,ncol=B)
dim(state.error); state.error[1:5,1:5]
pred.rep.share<-pred.rep.share+national.error+region.error+state.error
#calculate win probabilities for republicans by state across simulations
rep.state.win.prob<-apply(pred.rep.share,1,function(x) sum(x>0.5)/length(x))
rep.state.win.prob<-data.frame("state"=electoral.votes$state,"rep_win_prob"=rep.state.win.prob)
rep.state.win.prob
#calculate electoral votes that republicans win by state in each election
rep.EV<-apply(pred.rep.share,2,function(x) sum(electoral.votes$electoral_votes[x>0.5]))
length(rep.EV)
#calculate probability that each party wins the election
winner<-ifelse(rep.EV>=270,"R","D")
prop.table(table(winner))
